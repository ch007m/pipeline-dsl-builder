# The type will be used by the application to generate the resources for the selected provider: konflux, tekton
type: konflux
domain: build
namespace: user-ns1

repository:
  url: https://github.com/ch007m/new-quarkus-app-1
  dockerfilePath: src/main/docker/Dockerfile.jvm

# To generate the Application and/or Component CR
application:
  name: my-quarkus
  enable: false
component:
  name: my-quarkus-app
  enable: false

job:
  resourceType: PipelineRun
  name: quarkus-1-on-push
  description: PipelineRun performing a build of a Quarkus application using a bash script

  workspaces:
  - name: workspace
    volumeClaimTemplate:
      storage: 1Gi
      accessMode: ReadWriteOnce
  - name: git-auth
    secret:
      name: "{{ git_auth_secret }}"

  results:
    - IMAGE_URL: "$(tasks.build-container.results.IMAGE_URL)"
    - IMAGE_DIGEST: "$(tasks.build-container.results.IMAGE_DIGEST)"
    - BASE_IMAGES_DIGESTS: "$(tasks.build-container.results.BASE_IMAGES_DIGESTS)"
    - CHAINS-GIT_URL: "$(tasks.clone-repository.results.url)"
    - CHAINS-GIT_COMMIT: "$(tasks.clone-repository.results.commit)"
  
  params:
    - git-url: "{{source_url}}"
    - revision: "{{revision}}"
    - output-image: "quay.io/ch007m/user-ns1/my-quarkus/quarkus-1:{{revision}}"
    - image-expires-after: "5d"
    - build-image-index: ""
    # We need the following parameters when defined part of the PipelineSpec with default value and used by a task
    - build-source-image: false
    - prefetch-input: ""

    # Buildpack params
    - source-dir: "source"
    - imageUrl: "buildpacksio/pack"
    - imageTag: "latest"
    - packCmdBuilderFlags:
       - build
       - -B
       - quay.io/snowdrop/ubi-builder
       - -e
       - BP_JVM_VERSION=21
       - quarkus-hello:1.0

  actions:
    # Finally
    - name: show-sbom
      finally: true
      ref: bundle://quay.io/konflux-ci/tekton-catalog/task-show-sbom:0.1@sha256:9bfc6b99ef038800fe131d7b45ff3cd4da3a415dd536f7c657b3527b01c4a13b
      params:
        - IMAGE_URL: "$(tasks.build-container.results.IMAGE_URL)"
          
    - name: summary # Konflux uses as name show-summary !!
      finally: true
      ref: bundle://quay.io/konflux-ci/tekton-catalog/task-summary:0.2@sha256:d97c04ab42f277b1103eb6f3a053b247849f4f5b3237ea302a8ecada3b24e15b
      params:
        - pipelinerun-name: "$(context.pipelineRun.name)"
        - git-url: "$(tasks.clone-repository.results.url)?rev=$(tasks.clone-repository.results.commit)"
        - image-url: "$(params.output-image)"
        - build-task-status: "$(tasks.build-container.status)"

    # Tasks
    - name: jam
      params:
        - JAM_VERSION: "v2.7.3"

      results:
        - IMAGE_URL: "Image repository where the built image was pushed"
        - IMAGE_DIGEST: "Digest of the image just built"
        - BASE_IMAGES_DIGESTS: "Digests of the base images used for build"

      args:
        - "$(params.packCmdBuilderFlags)"

      script: |
        #!/usr/bin/env bash
        set -e
        
        function util::tools::os() {
          case "$(uname)" in
          "Darwin")
          echo "${1:-darwin}"
          ;;
          
          "Linux")
          echo "linux"
          ;;
          
          *)
          util::print::error "Unknown OS \"$(uname)\""
          exit 1
          esac
        }
        
        function util::tools::arch() {
          case "$(uname -m)" in
            arm64|aarch64)
              echo "arm64"
              ;;
        
            amd64|x86_64)
              if [[ "${1:-}" == "--blank-amd64" ]]; then
                echo ""
              elif [[ "${1:-}" == "--uname-format-amd64" ]]; then
                echo "x86_64"
              else
                echo "amd64"
              fi
              ;;
        
            *)
              util::print::error "Unknown Architecture \"$(uname -m)\""
              exit 1
          esac
        }
        
        outputDir="/usr/local/bin/"
        curl_args=(
          "--fail"
          "--silent"
          "--location"
          "--output" "${outputDir}/jam"
        )
        
        os=$(util::tools::os)
        arch=$(util::tools::arch)
        
        echo "Installing jam $(params.JAM_VERSION)"
        curl "https://github.com/paketo-buildpacks/jam/releases/download/$(params.JAM_VERSION)/jam-${os}-${arch}" \
          "${curl_args[@]}"
        chmod +x ${outputDir}/jam
        jam version
        
        echo "This is a test demo - 1"
        
        stack_dirpath="."
        cat <<EOF > ${stack_dirpath}/stack.toml
        id = "io.buildpacks.stacks.ubi8"
        homepage = "https://github.com/paketo-community/ubi-base-stack"
        maintainer = "Paketo Community"
        
        platforms = ["linux/amd64"]
        
        [build]
          description = "base build ubi8 image to support buildpacks"
          dockerfile = "./build.Dockerfile"
          gid = 1000
          shell = "/bin/bash"
          uid = 1002
        
          [build.args]
        
        [run]
          description = "base run ubi8 image to support buildpacks"
          dockerfile = "./run.Dockerfile"
          gid = 1000
          shell = "/bin/bash"
          uid = 1001
        
          [run.args]
        EOF
        
        cat <<EOF > ${stack_dirpath}/build.Dockerfile
        FROM registry.access.redhat.com/ubi8/ubi-minimal:latest
        EOF
        
        cat <<EOF > ${stack_dirpath}/run.Dockerfile
        FROM registry.access.redhat.com/ubi8/ubi-minimal:latest
        EOF
        
        args=(
          --config "${stack_dirpath}/stack.toml"
          --build-output "${build_dirpath}/build.oci"
          --run-output "${build_dirpath}/run.oci"
        )
        jam create-stack "${args[@]}"
                
        echo -n "URL of the image build is : quarkus-hello:1.0" | tee "$(results.IMAGE_URL.path)"
        echo -n "sha256ddddddddddddddddddddd" | tee "$(results.IMAGE_DIGEST.path)"
        echo -n "sha256eeeeeeeeeeeeeeeeeeeeee" | tee "$(results.BASE_IMAGES_DIGESTS.path)"
        

        
        
        


