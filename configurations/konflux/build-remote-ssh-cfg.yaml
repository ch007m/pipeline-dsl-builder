# The type will be used by the application to generate the resources for the selected provider: konflux, tekton
type: konflux
domain: remote-build
namespace: cmoullia-tenant

repository:
  url: https://github.com/paketo-community/builder-ubi-base

# To generate the Application and/or Component CR
application:
  name: buildpack-remote
  enable: false
component:
  name: buildpack-remote
  enable: false

job:
  resourceType: PipelineRun
  name: buildpack-remote
  description: PipelineRun using the pack cli to build the builder image remotely

  workspaces:
    - name: ssh
      secret:
        name: multi-platform-ssh-$(context.taskRun.name)

  params:
    # Buildpack params
    - source-dir: "source"
    - imageUrl: "buildpacksio/pack"
    - imageTag: "latest"
    - packCmdBuilderFlags:
        - builder
        - create
        - builder
        - --config
        - $(workspaces.source.path)/builder.toml

  actions:
    - name: pack
      runAfter: prefetch-dependencies # TODO: IS there a better way to set such a value : default or not
      image: quay.io/konflux-ci/buildah-task:latest@sha256:860a239c5f25376a435a514ae6d53a5c75b1fa492461d17774e9b7cb32d1e275
      params:
        - PACK_SOURCE_DIR: "$(params.source-dir)"
        - PACK_CLI_VERSION: "v0.35.1"
        - DOCKER_HOST: ""
        - SOURCE_SUBPATH: "."
        #- DOCKER_HOST: $(tasks.virtualmachine.results.ip)
        #- PACK_CMD_FLAGS:
        #    - "$(params.packCmdBuilderFlags)"
      workspaces:
        - name: source
          workspace: workspace
        - name: ssh
          workspace: ssh

      results:
        - IMAGE_URL: "Image repository where the built image was pushed"
        - IMAGE_DIGEST: "Digest of the image just built"
        - BASE_IMAGES_DIGESTS: "Digests of the base images used for build"

      args:
        - "$(params.packCmdBuilderFlags)"

      #scriptFileUrl: https://raw.githubusercontent.com/ch007m/pipeline-dsl-builder/main/scripts/ssh-remote.sh
      script: |
        #!/usr/bin/env bash
        set -e
        mkdir -p ~/.ssh
        if [ -e "/ssh/error" ]; then
          #no server could be provisioned
          cat /ssh/error
          exit 1
        fi
        export SSH_HOST=$(cat /ssh/host)
        cp /ssh/id_rsa ~/.ssh
        
        chmod 0400 ~/.ssh/id_rsa
        export BUILD_DIR=$(cat /ssh/user-dir)
        export SSH_ARGS="-o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=10"
        echo "$BUILD_DIR"
        ssh $SSH_ARGS "$SSH_HOST"  mkdir -p "$BUILD_DIR/workspaces" "$BUILD_DIR/scripts" "$BUILD_DIR/volumes"
        
        ## TO BE REVIEWED ==>
        echo "Installing pack ..."
        curl -sSL "https://github.com/buildpacks/pack/releases/download/$(params.PACK_CLI_VERSION)/pack-$(params.PACK_CLI_VERSION)-linux.tgz" | tar -C /usr/local/bin/ --no-same-owner -xzv pack
        
        echo "Checking pack ..."
        pack --version
        pack config experimental true

        #export DOCKER_HOST=tcp://$(params.DOCKER_HOST):2376
        #echo "DOCKER_HOST=tcp://$(params.DOCKER_HOST):2376"

        # We cannot get the array from the params PACK_CMD_FLAGS within the bash script as substitution don't work in this case !!
        echo "Getting the arguments ..."
        for cmd_arg in "$@"; do
          CLI_ARGS+=("$cmd_arg")
        done
        
        echo "Here are the arguments to be passed to the pack CLI"
        for i in "$CLI_ARGS[@]"; do
          echo "arg: $i"
        done
        
        echo "Building the builder image ..."
        echo "pack ${CLI_ARGS[@]}"
        pack "${CLI_ARGS[@]}"
        
        echo -n "URL of the image build is : quarkus-hello:1.0" | tee "$(results.IMAGE_URL.path)"
        echo -n "sha256ddddddddddddddddddddd" | tee "$(results.IMAGE_DIGEST.path)"
        echo -n "sha256eeeeeeeeeeeeeeeeeeeeee" | tee "$(results.BASE_IMAGES_DIGESTS.path)"
        

        
        
        


