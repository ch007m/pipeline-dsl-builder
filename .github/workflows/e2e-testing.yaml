name: Install-tekton-test-pipelineruns

on:
  workflow_dispatch:

env:
  IDPBUILDER_VERSION: v0.6.0

  TEKTON_VERSION: v0.61.1
  TEKTON_CLIENT_VERSION: 0.37.0

jobs:
  setup-idp:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install idpbuilder
        run: |
          version=${IDPBUILDER_VERSION}
          curl -L -o ./idpbuilder.tar.gz "https://github.com/cnoe-io/idpbuilder/releases/download/${version}/idpbuilder-$(uname | awk '{print tolower($0)}')-$(uname -m | sed 's/x86_64/amd64/').tar.gz"
          tar xzf idpbuilder.tar.gz
          sudo mv ./idpbuilder /usr/local/bin/

          idpbuilder version

      - name: Install tekton client
        run: |
          curl -sSL "https://github.com/tektoncd/cli/releases/download/v{$TEKTON_CLIENT_VERSION}/tkn_${TEKTON_CLIENT_VERSION}_Linux_x86_64.tar.gz" -o tkn.tar.gz
          sudo tar xvzf tkn.tar.gz -C /usr/local/bin/ tkn
          tkn version

      - name: Install podman
        run: |          
          sudo apt-get -y install podman

      - name: Create an IDP cluster and install the packages
        run: |
          PACKAGES_DIR=manifests/idp/packages
          idpbuilder create \
            -p $PACKAGES_DIR/tekton \

      - name: Check resources installed on the cluster
        run: |
          kubectl rollout status -n tekton-pipelines deployment/tekton-pipelines-controller
          kubectl rollout status -n tekton-pipelines deployment/tekton-pipelines-webhook
          kubectl get po -A

      #- name: Create the gitea organization
      #  run: |
      #    echo "Creating the organization: $REPO_ORG on $GITEA_REGISTRY"
      #    curl -k -X POST \
      #      "https://$GITEA_REGISTRY/api/v1/orgs" \
      #      -H 'accept: application/json' \
      #      -H 'Content-Type: application/json' \
      #      -u "$GITEA_USERNAME:$GITEA_PASSWORD" \
      #      -d '{"username": "'"$REPO_ORG"'"}'

      - name: Get gitea env vars
        run: |
          GITEA_REGISTRY=$(kubectl get ingress/my-gitea -n gitea -ojson | jq -r '.spec.rules[0].host')
          GITEA_USERNAME=$(idpbuilder get secrets -p gitea -ojson | jq -r '.[].data.username')
          GITEA_PASSWORD=$(idpbuilder get secrets -p gitea -ojson | jq -r '.[].data.password')
          
          echo "GITEA_REGISTRY=$GITEA_REGISTRY:8443" >> "$GITHUB_ENV"
          echo "GITEA_USERNAME=$GITEA_USERNAME" >> "$GITHUB_ENV"
          echo "GITEA_PASSWORD=$GITEA_PASSWORD" >> "$GITHUB_ENV"

      - name: Create the secret containing the creds to write images on Gitea
        run: |
          #GITEA_CREDS=$(echo -n "$GITEA_USERNAME:$GITEA_PASSWORD" | base64 -w 0)
          #cat <<EOF > config.json
          #{
          #  "auths": {
          #    "$GITEA_REGISTRY": {
          #      "auth": "$GITEA_CREDS"
          #    }
          #  }
          #}
          #EOF
          #kubectl create secret generic gitea-creds -n default --from-file=config.json          
          
          kubectl create secret docker-registry gitea-creds \
            --docker-username="$GITEA_USERNAME" \
            --docker-password="$GITEA_PASSWORD" \
            --docker-server="$GITEA_REGISTRY"

      - name: Create pack secret containing for pack CLI the config.toml
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: pack-config-toml
          data:
            # To pass as parameter: experimental = true
            config.toml: CmV4cGVyaW1lbnRhbCA9IHRydWU=
          EOF

      - name: Test if we can push an image to gitea
        run: |          
          REGISTRY="gitea.cnoe.localtest.me:8443/giteaadmin"
          podman login --tls-verify=false --authfile=${HOME}/.docker/config.json \
            -u $GITEA_USERNAME \
            -p $GITEA_PASSWORD \
            $GITEA_REGISTRY
          podman pull alpine
          podman tag alpine:latest $REGISTRY/alpine:latest
          podman push $REGISTRY/alpine:latest
          podman push --tls-verify=false --authfile=${HOME}/.docker/config.json \
            gitea.cnoe.localtest.me:8443/giteaadmin/alpine:latest

      - name: Deploy tekton examples - pipelinerun and check status
        run: |
          cfg_files=(generated/tekton/example/*)
          for f in "${cfg_files[@]}"
          do
            namespaceDefined=$(cat $f  | yq -r '.metadata.namespace != null')
            if ($namespaceDefined); then
              namespace=$(cat $f  | yq -r '.metadata.namespace')
            else
              namespace="default"
            fi
            kubectl create ns $namespace --dry-run=client -o yaml | kubectl apply -f -
                    
            echo "Deploy the pipelinerun: $f"
            kubectl apply -n $namespace -f $f 
            sleep 5s
            
            echo "Watch the log of the pipelinerun for: $f"
            tkn pipelinerun logs -n $namespace -f
          done

      - name: Deploy tekton buildpack example
        run: |
          cfg_files=(generated/tekton/buildpack/*)
          for f in "${cfg_files[@]}"
          do
            namespaceDefined=$(cat $f  | yq -r '.metadata.namespace != null')
            if ($namespaceDefined); then
              namespace=$(cat $f  | yq -r '.metadata.namespace')
            else
              namespace="default"
            fi
            kubectl create ns $namespace --dry-run=client -o yaml | kubectl apply -f -

            echo "Deploy the pipelinerun: $f"
            kubectl apply -n $namespace -f $f 
            sleep 5s

            echo "Watch the log of the pipelinerun for: $f"
            tkn pipelinerun logs -n $namespace -f
          done