apiVersion: "tekton.dev/v1"
kind: "PipelineRun"
metadata:
  annotations:
    build.appstudio.redhat.com/target_branch: "{{target_branch}}"
    build.appstudio.redhat.com/commit_sha: "{{revision}}"
    pipelinesascode.tekton.dev/on-cel-expression: "event == 'push' && target_branch\
      \ == 'main'"
    pipelinesascode.tekton.dev/max-keep-runs: "3"
    build.appstudio.openshift.io/repo: "https://github.com/paketo-community/builder-ubi-base?rev={{revision}}"
  labels:
    appstudio.openshift.io/application: "buildpack-remote"
    pipelines.appstudio.openshift.io/type: "build"
    pipelines.openshift.io/strategy: "remote-build"
    appstudio.openshift.io/component: "buildpack-remote"
    pipelines.openshift.io/used-by: "build-cloud"
    pipelines.openshift.io/runtime: "java"
  name: "buildpack-remote"
  namespace: "cmoullia-tenant"
spec:
  params:
  - name: "git-url"
    value: "{{source_url}}"
  - name: "revision"
    value: "{{revision}}"
  - name: "image-expires-after"
    value: "5d"
  - name: "build-image-index"
    value: ""
  - name: "build-source-image"
    value: "false"
  - name: "prefetch-input"
    value: ""
  - name: "PLATFORM"
    value: "linux-mlarge/amd64"
  - name: "output-image"
    value: "quay.io/redhat-user-workloads/cmoullia-tenant/konflux-demo/buildpack-remote:{{revision}}"
  - name: "source-dir"
    value: "source"
  - name: "imageUrl"
    value: "buildpacksio/pack"
  - name: "imageTag"
    value: "latest"
  - name: "packCmdBuilderFlags"
    value:
    - "builder"
    - "create"
    - "builder"
    - "--config"
    - "$(workspaces.source.path)/builder.toml"
  pipelineSpec:
    finally:
    - name: "show-sbom"
      params:
      - name: "IMAGE_URL"
        value: "$(tasks.build-container.results.IMAGE_URL)"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-show-sbom:0.1"
        - name: "name"
          value: "show-sbom"
        - name: "kind"
          value: "task"
        resolver: "bundles"
    - name: "summary"
      params:
      - name: "pipelinerun-name"
        value: "$(context.pipelineRun.name)"
      - name: "git-url"
        value: "$(tasks.git-clone.results.url)?rev=$(tasks.git-clone.results.commit)"
      - name: "image-url"
        value: "$(params.output-image)"
      - name: "build-task-status"
        value: "$(tasks.build-container.status)"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-summary:0.2"
        - name: "name"
          value: "summary"
        - name: "kind"
          value: "task"
        resolver: "bundles"
      workspaces:
      - name: "workspace"
        workspace: "workspace"
    results:
    - name: "IMAGE_URL"
      value: "$(tasks.build-container.results.IMAGE_URL)"
    - name: "IMAGE_DIGEST"
      value: "$(tasks.build-container.results.IMAGE_DIGEST)"
    - name: "BASE_IMAGES_DIGESTS"
      value: "$(tasks.build-container.results.BASE_IMAGES_DIGESTS)"
    - name: "CHAINS-GIT_URL"
      value: "$(tasks.git-clone.results.url)"
    - name: "CHAINS-GIT_COMMIT"
      value: "$(tasks.git-clone.results.commit)"
    tasks:
    - name: "init"
      params:
      - name: "image-url"
        value: "$(params.output-image)"
      - name: "rebuild"
        value: "$(params.rebuild)"
      - name: "skip-checks"
        value: "$(params.skip-checks)"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-init:0.2"
        - name: "name"
          value: "init"
        - name: "kind"
          value: "task"
        resolver: "bundles"
    - name: "git-clone"
      params:
      - name: "url"
        value: "$(params.git-url)"
      runAfter:
      - "init"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-git-clone:0.1"
        - name: "name"
          value: "git-clone"
        - name: "kind"
          value: "task"
        resolver: "bundles"
      workspaces:
      - name: "output"
        workspace: "workspace"
      - name: "basic-auth"
        workspace: "git-auth"
    - name: "prefetch-dependencies"
      params:
      - name: "input"
        value: "$(params.prefetch-input)"
      runAfter:
      - "git-clone"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-prefetch-dependencies:0.1"
        - name: "name"
          value: "prefetch-dependencies"
        - name: "kind"
          value: "task"
        resolver: "bundles"
      workspaces:
      - name: "source"
        workspace: "workspace"
      - name: "git-basic-auth"
        workspace: "git-auth"
    - name: "build-container"
      params:
      - name: "PACK_SOURCE_DIR"
        value: "$(params.source-dir)"
      - name: "PACK_CLI_VERSION"
        value: "v0.35.1"
      - name: "DOCKER_HOST"
        value: ""
      - name: "SOURCE_SUBPATH"
        value: "."
      - name: "IMAGE"
        value: "$(params.output-image)"
      - name: "PLATFORM"
        value: "$(params.PLATFORM)"
      runAfter:
      - "prefetch-dependencies"
      taskSpec:
        results:
        - description: "Image repository where the built image was pushed"
          name: "IMAGE_URL"
        - description: "Digest of the image just built"
          name: "IMAGE_DIGEST"
        - description: "Digests of the base images used for build"
          name: "BASE_IMAGES_DIGESTS"
        steps:
        - args:
          - "$(params.packCmdBuilderFlags)"
          image: "quay.io/konflux-ci/buildah-task:latest@sha256:860a239c5f25376a435a514ae6d53a5c75b1fa492461d17774e9b7cb32d1e275"
          name: "run-script"
          script: "#!/usr/bin/env bash\n# set -o verbose\nset -eu\nset -o pipefail\n\
            mkdir -p ~/.ssh\nif [ -e \"/ssh/error\" ]; then\n  #no server could be\
            \ provisioned\n  cat /ssh/error\nexit 1\nelif [ -e \"/ssh/otp\" ]; then\n\
            \  curl --cacert /ssh/otp-ca -XPOST -d @/ssh/otp $(cat /ssh/otp-server)\
            \ >~/.ssh/id_rsa\n  echo \"\" >> ~/.ssh/id_rsa\nelse\n  cp /ssh/id_rsa\
            \ ~/.ssh\nfi\nchmod 0400 ~/.ssh/id_rsa\n\nexport SSH_HOST=$(cat /ssh/host)\n\
            export BUILD_DIR=$(cat /ssh/user-dir)\nexport SSH_ARGS=\"-o StrictHostKeyChecking=no\
            \ -o ServerAliveInterval=60 -o ServerAliveCountMax=10\"\nmkdir -p scripts\n\
            \necho \"### List files under /ssh\"\nls -la /ssh\n\necho \"$BUILD_DIR\"\
            \nssh $SSH_ARGS \"$SSH_HOST\"  mkdir -p \"$BUILD_DIR/workspaces\" \"$BUILD_DIR/scripts\"\
            \ \"$BUILD_DIR/volumes\"\n\ncat >scripts/script-build.sh <<'REMOTESSHEOF'\n\
            #!/bin/sh\nTEMP_DIR=\"$HOME/tmp\"\nUSER_BIN_DIR=\"$HOME/bin\"\nBUILDPACK_PROJECTS=\"\
            $HOME/buildpack-repo\"\n\nPACK_CLI_VERSION=\"v0.35.1\"\nGO_VERSION=\"\
            1.23.0\"\n\nmkdir -p ${TEMP_DIR}\nmkdir -p ${USER_BIN_DIR}\nmkdir -p ${BUILDPACK_PROJECTS}\n\
            \nexport PATH=$PATH:${USER_BIN_DIR}\n\ncurl -sSL \"https://github.com/buildpacks/pack/releases/download/${PACK_CLI_VERSION}/pack-${PACK_CLI_VERSION}-linux.tgz\"\
            \ | tar -C ${TEMP_DIR} --no-same-owner -xzv pack\nmv ${TEMP_DIR}/pack\
            \ ${USER_BIN_DIR}\n\necho \"### Pack version ###\"\npack --version\npack\
            \ config experimental true        \n\necho \"### Podman version ###\"\n\
            podman version\npodman info\n\necho \"## Status of the service ##\"\n\
            systemctl status podman.socket\nsystemctl --user start podman.socket\n\
            systemctl status podman.socket\nls -la $XDG_RUNTIME_DIR/podman\n\necho\
            \ \"### Go version ###\"\ncurl -sSL \"https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz\"\
            \ | tar -C ${TEMP_DIR} -xz go\nmkdir -p ${USER_BIN_DIR}/go\nmv ${TEMP_DIR}/go\
            \ ${USER_BIN_DIR}\nchmod +x ${USER_BIN_DIR}/go\n\nmkdir -p $HOME/workspace\n\
            export GOPATH=$HOME/workspace\nexport GOROOT=${USER_BIN_DIR}/go\nexport\
            \ PATH=$PATH:$GOROOT/bin:$GOPATH/bin\ngo version\n\n# echo \"### Git version\
            \ ###\"\n# sudo yum install git => NOT ALLOWED\n# yum install git => This\
            \ command has to be run with superuser privileges \n# git version\n\n\
            echo \"### Build the builder image using pack\"\ncurl -sSL https://github.com/paketo-community/builder-ubi-base/tarball/main\
            \ | tar -xz -C ${TEMP_DIR}\nmv ${TEMP_DIR}/paketo-community-builder-ubi-base-*\
            \ ${BUILDPACK_PROJECTS}/builder-ubi-base\ncd ${BUILDPACK_PROJECTS}/builder-ubi-base\n\
            \nexport DOCKER_HOST=unix://$XDG_RUNTIME_DIR/podman/podman.sock\npack\
            \ builder create $(params.IMAGE) --config builder.toml -v\n\ncontainer=$(buildah\
            \ from --pull-never $IMAGE)\nbuildah mount $container\n\nREMOTESSHEOF\n\
            chmod +x scripts/script-build.sh\nssh $SSH_ARGS \"$SSH_HOST\" \"bash -s\"\
            \ <scripts/script-build.sh\n\necho -n \"URL of the image build is : quarkus-hello:1.0\"\
            \ | tee \"$(results.IMAGE_URL.path)\"\necho -n \"sha256ddddddddddddddddddddd\"\
            \ | tee \"$(results.IMAGE_DIGEST.path)\"\necho -n \"sha256eeeeeeeeeeeeeeeeeeeeee\"\
            \ | tee \"$(results.BASE_IMAGES_DIGESTS.path)\"\n"
          volumeMounts:
          - mountPath: "/ssh"
            name: "ssh"
            readOnly: true
        volumes:
        - name: "ssh"
          secret:
            secretName: "multi-platform-ssh-$(context.taskRun.name)"
      workspaces:
      - name: "source"
        workspace: "workspace"
    - name: "build-image-index"
      params:
      - name: "IMAGE"
        value: "$(params.output-image)"
      - name: "COMMIT_SHA"
        value: "$(tasks.git-clone.results.commit)"
      - name: "IMAGE_EXPIRES_AFTER"
        value: "$(params.image-expires-after)"
      - name: "ALWAYS_BUILD_INDEX"
        value: "$(params.build-image-index)"
      - name: "IMAGES"
        value:
        - "$(tasks.build-container.results.IMAGE_URL)@$(tasks.build-container.results.IMAGE_DIGEST)"
      runAfter:
      - "build-container"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-build-image-index:0.1"
        - name: "name"
          value: "build-image-index"
        - name: "kind"
          value: "task"
        resolver: "bundles"
      workspaces:
      - name: "workspace"
        workspace: "workspace"
    - name: "source-build"
      params:
      - name: "BINARY_IMAGE"
        value: "$(params.output-image)"
      - name: "BASE_IMAGES"
        value: "$(tasks.build-container.results.BASE_IMAGES_DIGESTS)"
      runAfter:
      - "build-container"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-source-build:0.1"
        - name: "name"
          value: "source-build"
        - name: "kind"
          value: "task"
        resolver: "bundles"
      workspaces:
      - name: "workspace"
        workspace: "workspace"
    - name: "clair-scan"
      params:
      - name: "image-digest"
        value: "$(tasks.build-container.results.IMAGE_DIGEST)"
      - name: "image-url"
        value: "$(tasks.build-container.results.IMAGE_URL)"
      runAfter:
      - "build-container"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-clair-scan:0.1"
        - name: "name"
          value: "clair-scan"
        - name: "kind"
          value: "task"
        resolver: "bundles"
    - name: "ecosystem-cert-preflight-checks"
      params:
      - name: "image-url"
        value: "$(tasks.build-container.results.IMAGE_URL)"
      runAfter:
      - "build-container"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-ecosystem-cert-preflight-checks:0.1"
        - name: "name"
          value: "ecosystem-cert-preflight-checks"
        - name: "kind"
          value: "task"
        resolver: "bundles"
    - name: "sast-snyk-check"
      params:
      - name: "image-digest"
        value: "$(tasks.build-container.results.IMAGE_DIGEST)"
      - name: "image-url"
        value: "$(tasks.build-container.results.IMAGE_URL)"
      runAfter:
      - "git-clone"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-sast-snyk-check:0.2"
        - name: "name"
          value: "sast-snyk-check"
        - name: "kind"
          value: "task"
        resolver: "bundles"
      workspaces:
      - name: "workspace"
        workspace: "workspace"
    - name: "clamav-scan"
      params:
      - name: "image-digest"
        value: "$(tasks.build-container.results.IMAGE_DIGEST)"
      - name: "image-url"
        value: "$(tasks.build-container.results.IMAGE_URL)"
      runAfter:
      - "build-container"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-clamav-scan:0.1"
        - name: "name"
          value: "clamav-scan"
        - name: "kind"
          value: "task"
        resolver: "bundles"
    - name: "sbom-json-check"
      params:
      - name: "IMAGE_DIGEST"
        value: "$(tasks.build-container.results.IMAGE_DIGEST)"
      - name: "IMAGE_URL"
        value: "$(tasks.build-container.results.IMAGE_URL)"
      runAfter:
      - "build-container"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-sbom-json-check:0.1"
        - name: "name"
          value: "sbom-json-check"
        - name: "kind"
          value: "task"
        resolver: "bundles"
  timeouts:
    pipeline: "300000000000ns"
  workspaces:
  - name: "workspace"
    volumeClaimTemplate:
      apiVersion: "v1"
      kind: "PersistentVolumeClaim"
      spec:
        accessModes:
        - "ReadWriteOnce"
        resources:
          requests:
            storage: "1Gi"
  - name: "git-auth"
    secret:
      secretName: "{{ git_auth_secret }}"
  - name: "ssh"
    secret:
      secretName: "multi-platform-ssh-$(context.taskRun.name)"
