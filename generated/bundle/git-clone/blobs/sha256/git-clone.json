{"apiVersion":"tekton.dev/v1","kind":"Task","metadata":{"annotations":{"tekton.dev/categories":"Git","tekton.dev/displayName":"git clone","tekton.dev/pipelines.minVersion":"0.21.0","tekton.dev/platforms":"linux/amd64,linux/s390x,linux/ppc64le,linux/arm64","tekton.dev/tags":"git"},"labels":{"app.kubernetes.io/version":"0.1"},"name":"git-clone"},"spec":{"description":"The git-clone Task will clone a repo from the provided url into the output Workspace. By default the repo will be cloned into the root of your Workspace.","params":[{"description":"Repository URL to clone from.","name":"url","type":"string"},{"default":"","description":"Revision to checkout. (branch, tag, sha, ref, etc...)","name":"revision","type":"string"},{"default":"","description":"Refspec to fetch before checking out revision.","name":"refspec","type":"string"},{"default":"true","description":"Initialize and fetch git submodules.","name":"submodules","type":"string"},{"default":"1","description":"Perform a shallow clone, fetching only the most recent N commits.","name":"depth","type":"string"},{"default":"true","description":"Set the `http.sslVerify` global git config. Setting this to `false` is not advised unless you are sure that you trust your git remote.","name":"sslVerify","type":"string"},{"default":"source","description":"Subdirectory inside the `output` Workspace to clone the repo into.","name":"subdirectory","type":"string"},{"default":"","description":"Define the directory patterns to match or exclude when performing a sparse checkout.","name":"sparseCheckoutDirectories","type":"string"},{"default":"true","description":"Clean out the contents of the destination directory if it already exists before cloning.","name":"deleteExisting","type":"string"},{"default":"","description":"HTTP proxy server for non-SSL requests.","name":"httpProxy","type":"string"},{"default":"","description":"HTTPS proxy server for SSL requests.","name":"httpsProxy","type":"string"},{"default":"","description":"Opt out of proxying HTTP/HTTPS requests.","name":"noProxy","type":"string"},{"default":"false","description":"Log the commands that are executed during `git-clone`'s operation.","name":"verbose","type":"string"},{"default":"","description":"Deprecated. Has no effect. Will be removed in the future.","name":"gitInitImage","type":"string"},{"default":"/tekton/home","description":"Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user.\n","name":"userHome","type":"string"},{"default":"true","description":"Check symlinks in the repo. If they're pointing outside of the repo, the build will fail.\n","name":"enableSymlinkCheck","type":"string"},{"default":"false","description":"Fetch all tags for the repo.","name":"fetchTags","type":"string"},{"default":"trusted-ca","description":"The name of the ConfigMap to read CA bundle data from.","name":"caTrustConfigMapName","type":"string"},{"default":"ca-bundle.crt","description":"The name of the key in the ConfigMap that contains the CA bundle data.","name":"caTrustConfigMapKey","type":"string"}],"results":[{"description":"The precise commit SHA that was fetched by this Task.","name":"commit"},{"description":"The precise URL that was fetched by this Task.","name":"url"},{"description":"The commit timestamp of the checkout","name":"commit-timestamp"}],"steps":[{"computeResources":{},"env":[{"name":"HOME","value":"$(params.userHome)"},{"name":"PARAM_URL","value":"$(params.url)"},{"name":"PARAM_REVISION","value":"$(params.revision)"},{"name":"PARAM_REFSPEC","value":"$(params.refspec)"},{"name":"PARAM_SUBMODULES","value":"$(params.submodules)"},{"name":"PARAM_DEPTH","value":"$(params.depth)"},{"name":"PARAM_SSL_VERIFY","value":"$(params.sslVerify)"},{"name":"PARAM_SUBDIRECTORY","value":"$(params.subdirectory)"},{"name":"PARAM_DELETE_EXISTING","value":"$(params.deleteExisting)"},{"name":"PARAM_HTTP_PROXY","value":"$(params.httpProxy)"},{"name":"PARAM_HTTPS_PROXY","value":"$(params.httpsProxy)"},{"name":"PARAM_NO_PROXY","value":"$(params.noProxy)"},{"name":"PARAM_VERBOSE","value":"$(params.verbose)"},{"name":"PARAM_SPARSE_CHECKOUT_DIRECTORIES","value":"$(params.sparseCheckoutDirectories)"},{"name":"PARAM_USER_HOME","value":"$(params.userHome)"},{"name":"PARAM_FETCH_TAGS","value":"$(params.fetchTags)"},{"name":"PARAM_GIT_INIT_IMAGE","value":"$(params.gitInitImage)"},{"name":"WORKSPACE_OUTPUT_PATH","value":"$(workspaces.output.path)"},{"name":"WORKSPACE_SSH_DIRECTORY_BOUND","value":"$(workspaces.ssh-directory.bound)"},{"name":"WORKSPACE_SSH_DIRECTORY_PATH","value":"$(workspaces.ssh-directory.path)"},{"name":"WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND","value":"$(workspaces.basic-auth.bound)"},{"name":"WORKSPACE_BASIC_AUTH_DIRECTORY_PATH","value":"$(workspaces.basic-auth.path)"}],"image":"quay.io/konflux-ci/git-clone@sha256:2cde938c6f4902c35dbfe1809a96b468b6b47d273269a0ca3cad323481f45874","name":"clone","script":"#!/usr/bin/env sh\nset -eu\n\nif [ \"${PARAM_VERBOSE}\" = \"true\" ] ; then\n  set -x\nfi\n\nif [ -n \"${PARAM_GIT_INIT_IMAGE}\" ]; then\n  echo \"WARNING: provided deprecated gitInitImage parameter has no effect.\"\nfi\n\nif [ \"${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}\" = \"true\" ] ; then\n  if [ -f \"${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials\" ] \u0026\u0026 [ -f \"${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig\" ]; then\n    cp \"${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials\" \"${PARAM_USER_HOME}/.git-credentials\"\n    cp \"${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig\" \"${PARAM_USER_HOME}/.gitconfig\"\n  # Compatibility with kubernetes.io/basic-auth secrets\n  elif [ -f \"${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/username\" ] \u0026\u0026 [ -f \"${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/password\" ]; then\n    HOSTNAME=$(echo $PARAM_URL | awk -F/ '{print $3}')\n    echo \"https://$(cat ${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/username):$(cat ${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/password)@$HOSTNAME\" \u003e \"${PARAM_USER_HOME}/.git-credentials\"\n    echo -e \"[credential \\\"https://$HOSTNAME\\\"]\\n  helper = store\" \u003e \"${PARAM_USER_HOME}/.gitconfig\"\n  else\n    echo \"Unknown basic-auth workspace format\"\n    exit 1\n  fi\n  chmod 400 \"${PARAM_USER_HOME}/.git-credentials\"\n  chmod 400 \"${PARAM_USER_HOME}/.gitconfig\"\nfi\n\n# Should be called after the gitconfig is copied from the repository secret\nca_bundle=/mnt/trusted-ca/ca-bundle.crt\nif [ -f \"$ca_bundle\" ]; then\n  echo \"INFO: Using mounted CA bundle: $ca_bundle\"\n  git config --global http.sslCAInfo \"$ca_bundle\"\nfi\n\nif [ \"${WORKSPACE_SSH_DIRECTORY_BOUND}\" = \"true\" ] ; then\n  cp -R \"${WORKSPACE_SSH_DIRECTORY_PATH}\" \"${PARAM_USER_HOME}\"/.ssh\n  chmod 700 \"${PARAM_USER_HOME}\"/.ssh\n  chmod -R 400 \"${PARAM_USER_HOME}\"/.ssh/*\nfi\n\nCHECKOUT_DIR=\"${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}\"\n\ncleandir() {\n  # Delete any existing contents of the repo directory if it exists.\n  #\n  # We don't just \"rm -rf ${CHECKOUT_DIR}\" because ${CHECKOUT_DIR} might be \"/\"\n  # or the root of a mounted volume.\n  if [ -d \"${CHECKOUT_DIR}\" ] ; then\n    # Delete non-hidden files and directories\n    rm -rf \"${CHECKOUT_DIR:?}\"/*\n    # Delete files and directories starting with . but excluding ..\n    rm -rf \"${CHECKOUT_DIR}\"/.[!.]*\n    # Delete files and directories starting with .. plus any other character\n    rm -rf \"${CHECKOUT_DIR}\"/..?*\n  fi\n}\n\nif [ \"${PARAM_DELETE_EXISTING}\" = \"true\" ] ; then\n  cleandir\nfi\n\ntest -z \"${PARAM_HTTP_PROXY}\" || export HTTP_PROXY=\"${PARAM_HTTP_PROXY}\"\ntest -z \"${PARAM_HTTPS_PROXY}\" || export HTTPS_PROXY=\"${PARAM_HTTPS_PROXY}\"\ntest -z \"${PARAM_NO_PROXY}\" || export NO_PROXY=\"${PARAM_NO_PROXY}\"\n\n/ko-app/git-init \\\n  -url=\"${PARAM_URL}\" \\\n  -revision=\"${PARAM_REVISION}\" \\\n  -refspec=\"${PARAM_REFSPEC}\" \\\n  -path=\"${CHECKOUT_DIR}\" \\\n  -sslVerify=\"${PARAM_SSL_VERIFY}\" \\\n  -submodules=\"${PARAM_SUBMODULES}\" \\\n  -depth=\"${PARAM_DEPTH}\" \\\n  -sparseCheckoutDirectories=\"${PARAM_SPARSE_CHECKOUT_DIRECTORIES}\"\ncd \"${CHECKOUT_DIR}\"\nRESULT_SHA=\"$(git rev-parse HEAD)\"\nEXIT_CODE=\"$?\"\nif [ \"${EXIT_CODE}\" != 0 ] ; then\n  exit \"${EXIT_CODE}\"\nfi\nprintf \"%s\" \"${RESULT_SHA}\" \u003e \"$(results.commit.path)\"\nprintf \"%s\" \"${PARAM_URL}\" \u003e \"$(results.url.path)\"\nprintf \"%s\" \"$(git log -1 --pretty=%ct)\" \u003e \"$(results.commit-timestamp.path)\"\n\nif [ \"${PARAM_FETCH_TAGS}\" = \"true\" ] ; then\n  echo \"Fetching tags\"\n  git fetch --tags\nfi\n","securityContext":{"runAsUser":0},"volumeMounts":[{"mountPath":"/mnt/trusted-ca","name":"trusted-ca","readOnly":true}]},{"computeResources":{},"env":[{"name":"PARAM_ENABLE_SYMLINK_CHECK","value":"$(params.enableSymlinkCheck)"},{"name":"PARAM_SUBDIRECTORY","value":"$(params.subdirectory)"},{"name":"WORKSPACE_OUTPUT_PATH","value":"$(workspaces.output.path)"}],"image":"quay.io/konflux-ci/git-clone@sha256:2cde938c6f4902c35dbfe1809a96b468b6b47d273269a0ca3cad323481f45874","name":"symlink-check","script":"#!/usr/bin/env bash\nset -euo pipefail\n\nCHECKOUT_DIR=\"${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}\"\ncheck_symlinks() {\n  FOUND_SYMLINK_POINTING_OUTSIDE_OF_REPO=false\n  while read symlink\n  do\n    target=$(readlink -m \"$symlink\")\n    if ! [[ \"$target\" =~ ^$CHECKOUT_DIR ]]; then\n      echo \"The cloned repository contains symlink pointing outside of the cloned repository: $symlink\"\n      FOUND_SYMLINK_POINTING_OUTSIDE_OF_REPO=true\n    fi\n  done \u003c \u003c(find $CHECKOUT_DIR -type l -print)\n  if [ \"$FOUND_SYMLINK_POINTING_OUTSIDE_OF_REPO\" = true ] ; then\n    return 1\n  fi\n}\n\nif [ \"${PARAM_ENABLE_SYMLINK_CHECK}\" = \"true\" ] ; then\n  echo \"Running symlink check\"\n  check_symlinks\nfi\n"}],"volumes":[{"configMap":{"items":[{"key":"$(params.caTrustConfigMapKey)","path":"ca-bundle.crt"}],"name":"$(params.caTrustConfigMapName)","optional":true},"name":"trusted-ca"}],"workspaces":[{"description":"The git repo will be cloned onto the volume backing this Workspace.","name":"output"},{"description":"A .ssh directory with private key, known_hosts, config, etc. Copied to\nthe user's home before git commands are executed. Used to authenticate\nwith the git remote when performing the clone. Binding a Secret to this\nWorkspace is strongly recommended over other volume types.\n","name":"ssh-directory","optional":true},{"description":"A Workspace containing a .gitconfig and .git-credentials file or username and password.\nThese will be copied to the user's home before any git commands are run. Any\nother files in this Workspace are ignored. It is strongly recommended\nto use ssh-directory over basic-auth whenever possible and to bind a\nSecret to this Workspace over other volume types.\n","name":"basic-auth","optional":true}]}}