package dev.snowdrop.factory.konflux.component;

import dev.snowdrop.konflux.v1alpha1.Component;
import dev.snowdrop.konflux.v1alpha1.componentspec.source.Git;
import dev.snowdrop.model.Configurator;

import java.util.Map;

/*
New YAML example: https://github.com/konflux-ci/konflux-ci/blob/main/test/resources/demo-users/user/ns2/application-and-component.yaml

and

hereafter => YAML generated by konflux-ci
---
apiVersion: appstudio.redhat.com/v1alpha1
kind: Component
metadata:
  annotations:
    build.appstudio.openshift.io/pipeline: '{"name":"docker-build", "bundle": "latest"}'
    image.redhat.com/image: '{"image":"quay.io/ch007m/user-ns1/my-quarkus/quarkus-1","visibility":"public","secret":"quarkus-1"}'
  finalizers:
  - test.appstudio.openshift.io/component
  - image-controller.appstudio.openshift.io/image-repository
  - image-registry-secret-sa-link.component.appstudio.openshift.io/finalizer
  - pac.component.appstudio.openshift.io/finalizer
  name: quarkus-1
  namespace: user-ns1
spec:
  application: my-quarkus
  componentName: quarkus-1
  resources: {}
  source:
    git:
      context: ./
      dockerfileUrl: src/main/docker/Dockerfile.jvm
      revision: main
      url: https://github.com/ch007m/new-quarkus-app-1.git
* */
public class ComponentBuilder {

    public static Component createComponent(Configurator cfg) {
        Component component = new dev.snowdrop.konflux.v1alpha1.ComponentBuilder()
            // @formatter:off
            .withNewMetadata()
                .withName(cfg.getJob().getName())
                .withNamespace(cfg.getNamespace())
                .withAnnotations(Annotations.get(cfg))
            .endMetadata()
            .withNewSpec()
               .withApplication(cfg.getJob().getName())
               .withComponentName(cfg.getJob().getName())
               .withNewSource()
                  .withGit(new GitBuilder()
                     .withUrl(cfg.getRepository().getUrl())
                     .withRevision(cfg.getRepository().getRevision())
                     .withContext(cfg.getRepository().getContext())
                     .withDockerfileUrl(cfg.getRepository().getDockerfileUrl())
                     .build())
               .endSource()
            .endSpec()
            // @formatter:on
            .build();
        return component;
    }
}
