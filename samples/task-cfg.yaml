# The flavor will be used to render the pipeline according to a specific provider: konflux, tekton
flavor: konflux

# A task to be generated
task:
  # id of the task to be used and which could be used to chain the task with `runAfter`
  id: "task-0"

  # name of the task
  name: "my-task"

  # url of the tasks expressed in a way that we can create one of the different TaskRef => bundle, git, etc:
  # Example:
  # git:<url>:<revision>:<path>
  # bundle:<image_url>:<name> where image_url is quay.io/redhat-appstudio-tekton-catalog/task-inspect-image:0.1@sha256
  #
  url: ""

  # condition expressed in a way that we can translate it to Tekton When syntax
  when: ""

  # params
  params: ""

  # To be investigated to find a proper way to manage the wks as they should be created properly as declared in several places: https://github.com/redhat-buildpacks/catalog/blob/main/tekton/pipeline/rhtap/01/pipeline-buildpacks.yaml#L386-L388, https://github.com/redhat-buildpacks/catalog/blob/main/tekton/pipeline/rhtap/01/pipeline-buildpacks.yaml#L7 & https://github.com/redhat-buildpacks/catalog/blob/main/tekton/pipelinerun/rhtap/pipelinerun-buildpacks-template.yaml#L480-L496 etc
  workspaces: ""

  # run after task x, y or z identified with their "id"
  runAfter: "task-0"


